name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  POSTGRES_VERSION: '15'

jobs:
  # Backend Tests
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test123
          POSTGRES_USER: test
          POSTGRES_DB: sedori_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/sedori-api/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend/sedori-api
        run: npm ci

      - name: Run backend linting
        working-directory: ./backend/sedori-api
        run: npm run lint

      - name: Run backend tests
        working-directory: ./backend/sedori-api
        run: npm test
        env:
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_USERNAME: test
          DATABASE_PASSWORD: test123
          DATABASE_NAME: sedori_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-jwt-secret-key
          NODE_ENV: test

      - name: Run backend E2E tests
        working-directory: ./backend/sedori-api
        run: npm run test:e2e
        env:
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_USERNAME: test
          DATABASE_PASSWORD: test123
          DATABASE_NAME: sedori_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-jwt-secret-key
          NODE_ENV: test

  # Frontend Tests
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend linting
        working-directory: ./frontend
        run: npm run lint

      - name: Run type checking
        working-directory: ./frontend
        run: npm run type-check

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test
        env:
          CI: true

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
        env:
          API_BASE_URL: http://localhost:3000

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend/sedori-api
          file: ./backend/sedori-api/Dockerfile
          target: production
          push: false
          tags: sedori-api:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          target: production
          push: false
          tags: sedori-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create test environment file
        run: |
          cat > .env.test << EOF
          POSTGRES_DB=sedori_test
          POSTGRES_USER=test
          POSTGRES_PASSWORD=test123
          REDIS_PASSWORD=redis123
          JWT_SECRET=test-jwt-secret-key-for-integration-tests
          MEILI_MASTER_KEY=test-meilisearch-key
          MINIO_ROOT_USER=testuser
          MINIO_ROOT_PASSWORD=testpassword123
          NODE_ENV=test
          EOF

      - name: Start services for integration testing
        run: |
          docker-compose -f docker-compose.yml --env-file .env.test up -d postgresql redis
          sleep 10

      - name: Wait for services to be ready
        run: |
          timeout 60 bash -c 'until docker-compose -f docker-compose.yml ps | grep -q "healthy"; do sleep 2; done'

      - name: Run database migrations
        run: |
          docker-compose -f docker-compose.yml --env-file .env.test run --rm api npm run migration:run

      - name: Run integration tests
        run: |
          docker-compose -f docker-compose.yml --env-file .env.test run --rm api npm run test:e2e

      - name: Cleanup test environment
        if: always()
        run: |
          docker-compose -f docker-compose.yml down -v
          docker system prune -f

  # Code Quality Checks
  quality-check:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install backend dependencies
        working-directory: ./backend/sedori-api
        run: npm ci

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run backend security audit
        working-directory: ./backend/sedori-api
        run: npm audit --audit-level moderate

      - name: Run frontend security audit
        working-directory: ./frontend
        run: npm audit --audit-level moderate

      - name: Check for outdated dependencies (Backend)
        working-directory: ./backend/sedori-api
        run: npm outdated || true

      - name: Check for outdated dependencies (Frontend)
        working-directory: ./frontend
        run: npm outdated || true

  # Deployment (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, docker-build, integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub (if using Docker Hub)
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend/sedori-api
          file: ./backend/sedori-api/Dockerfile
          target: production
          push: true
          tags: |
            sedori/api:latest
            sedori/api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          target: production
          push: true
          tags: |
            sedori/frontend:latest
            sedori/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to production server
        run: |
          echo "ğŸš€ Deployment would happen here"
          echo "Deployment artifacts ready:"
          echo "- Backend: sedori/api:${{ github.sha }}"
          echo "- Frontend: sedori/frontend:${{ github.sha }}"