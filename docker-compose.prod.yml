services:
  postgresql:
    image: postgres:15
    container_name: sedori-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sedori}
      POSTGRES_USER: ${POSTGRES_USER:-sedori}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-sedori} -d ${POSTGRES_DB:-sedori}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sedori-network

  redis:
    image: redis:7-alpine
    container_name: sedori-redis-prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data_prod:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - sedori-network

  meilisearch:
    image: getmeili/meilisearch:latest
    container_name: sedori-meilisearch-prod
    restart: unless-stopped
    environment:
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY}
      MEILI_NO_ANALYTICS: true
      MEILI_ENV: production
      MEILI_LOG_LEVEL: INFO
      MEILI_DB_PATH: /meili_data
    ports:
      - "${MEILI_PORT:-7700}:7700"
    volumes:
      - meilisearch_data_prod:/meili_data
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:7700/health"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - sedori-network

  minio:
    image: minio/minio:latest
    container_name: sedori-minio-prod
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio_data_prod:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - sedori-network

  api:
    build:
      context: ./backend/sedori-api
      dockerfile: Dockerfile
      target: production
    container_name: sedori-api-prod
    restart: unless-stopped
    environment:
      - DATABASE_HOST=postgresql
      - DATABASE_PORT=5432
      - DATABASE_USERNAME=${POSTGRES_USER:-sedori}
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_NAME=${POSTGRES_DB:-sedori}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - NODE_ENV=production
      - PORT=3000
      - MEILI_HOST=http://meilisearch:7700
      - MEILI_MASTER_KEY=${MEILI_MASTER_KEY}
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - MINIO_USE_SSL=false
    ports:
      - "${API_PORT:-3000}:3000"
    depends_on:
      - postgresql
      - redis
      - meilisearch
      - minio
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sedori-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: sedori-frontend-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - API_BASE_URL=http://api:3000
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:3000}
    ports:
      - "${FRONTEND_PORT:-3001}:3001"
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sedori-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  nginx:
    image: nginx:alpine
    container_name: sedori-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/ssl/certs:ro
    depends_on:
      - api
      - frontend
    networks:
      - sedori-network

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  meilisearch_data_prod:
    driver: local
  minio_data_prod:
    driver: local

networks:
  sedori-network:
    driver: bridge